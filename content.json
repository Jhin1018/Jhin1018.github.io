{"meta":{"title":"Voice of Eccentric","subtitle":"","description":"一个怪人的漫谈","author":"WANG JING","url":"http://Jhin1018.github.io","root":"/"},"pages":[{"title":"所有分类","date":"2021-05-03T11:02:10.566Z","updated":"2021-05-03T11:02:10.566Z","comments":true,"path":"categories/index.html","permalink":"http://jhin1018.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2021-05-03T11:02:45.348Z","updated":"2021-05-03T11:02:45.348Z","comments":true,"path":"tags/index.html","permalink":"http://jhin1018.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2021-05-03T12:03:33.893Z","updated":"2021-05-03T12:03:33.893Z","comments":false,"path":"about/index.html","permalink":"http://jhin1018.github.io/about/index.html","excerpt":"","text":"一个奇怪的人"}],"posts":[{"title":"刷题日记day2","slug":"codeday2","date":"2021-05-03T12:17:01.000Z","updated":"2021-05-03T16:39:38.556Z","comments":true,"path":"2021/05/03/codeday2/","link":"","permalink":"http://jhin1018.github.io/2021/05/03/codeday2/","excerpt":"","text":"每日一题 LeetCode 7 翻转整数说实话这个题目太过简单，只需要考虑溢出时的情况，不过这里有趣的是C++溢出时会报错而Java不会，因此java中只需要判断每次乘10加上个位数字后再整除10还等不等于原数的情况，如果不等那就是溢出了，溢出就返回0。 Code： 123456789101112public int reverse(int x) &#123; int res &#x3D; 0; while (x !&#x3D; 0) &#123; int tmp &#x3D; res * 10 + x % 10; if (tmp &#x2F; 10 !&#x3D; res) &#123; &#x2F;&#x2F; 溢出 return 0; &#125; res &#x3D; tmp; x &#x2F;&#x3D; 10; &#125; return res; &#125;","categories":[{"name":"技术","slug":"技术","permalink":"http://jhin1018.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://jhin1018.github.io/tags/LeetCode/"}]},{"title":"刷题日记day1 —— LeetCode 554 砖墙","slug":"codeday1","date":"2021-05-03T06:33:03.000Z","updated":"2021-05-03T16:31:24.545Z","comments":true,"path":"2021/05/03/codeday1/","link":"","permalink":"http://jhin1018.github.io/2021/05/03/codeday1/","excerpt":"","text":"每日一题 LeetCode 554思路一最初想法，模拟整个砖墙，用一个二维数组储存整个墙，然后判断各个缝隙。 12345678910111213141516171819202122232425262728293031public int leastBricks(List&lt;List&lt;Integer&gt;&gt; wall) &#123; int height = wall.size(); int width =0; for(int i:wall.get(1))&#123; width += i; &#125; if(width ==1) &#123; return height;&#125; int[][] map = new int[height][width]; for(int i=0;i&lt;height;i++)&#123; List&lt;Integer&gt; line = wall.get(i); int l =0; int num =0; for(int j:line)&#123; int end =l+j; for(;l&lt;end;l++)&#123; map[i][l] =num; &#125; num ++; &#125; &#125; int res =height; for(int i=0;i&lt;width-1;i++)&#123; int cnt =0; for(int j=0;j&lt;height;j++)&#123; if(map[j][i] ==map[j][i+1])cnt++; &#125; res =Math.min(res,cnt); &#125; return res; &#125; 结果：内存爆了，输入为[[100000000],[100000000],[100000000]] 思路二从刚才的思路里可以发现，我们用这个二维数组主要保存的信息是每一行砖块之间的缝隙，因此我们可以考虑用哈希表来记录这样一对数据&lt;从左往右缝隙出现的距离，从上到下该距离上有缝隙的次数&gt;,考虑到穿过的最小的砖块数=行数-缝隙出现的最大次数，所以可以得到解答。 Code： 123456789101112131415161718192021222324public int leastBricks(List&lt;List&lt;Integer&gt;&gt; wall) &#123; Map&lt;Integer,Integer&gt; map &#x3D; new HashMap&lt;Integer,Integer&gt;(); for(List&lt;Integer&gt; list:wall)&#123; int cur &#x3D; 0; for(int i&#x3D;0;i&lt;list.size()-1;i++)&#123; cur+&#x3D;list.get(i);&#x2F;&#x2F;缝隙从左到右的距离 if(map.containsKey(cur))&#123;&#x2F;&#x2F;如果该距离上出现过缝隙 map.put(cur,map.get(cur)+1);&#x2F;&#x2F;给value+1 &#125;else&#123; map.put(cur,1);&#x2F;&#x2F;该距离上第一次出现缝隙 &#125; &#125; &#125; int max &#x3D; 0; for(Map.Entry&lt;Integer, Integer&gt; entry:map.entrySet())&#123; max &#x3D; max&gt;entry.getValue()?max:entry.getValue(); &#125; return wall.size()-max;&#125; 知识点总结HashMap中的EntryHashMap的主干是一个Entry数组。Entry是HashMap的基本组成单元，每一个Entry包含一个key-value键值对。","categories":[{"name":"技术","slug":"技术","permalink":"http://jhin1018.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://jhin1018.github.io/tags/LeetCode/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-05-03T05:08:44.828Z","updated":"2021-05-03T05:08:44.828Z","comments":true,"path":"2021/05/03/hello-world/","link":"","permalink":"http://jhin1018.github.io/2021/05/03/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"技术","slug":"技术","permalink":"http://jhin1018.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://jhin1018.github.io/tags/LeetCode/"}]}